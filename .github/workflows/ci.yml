# This workflow will build a Swift project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-swift

name: build_test

on:
  push:
    branches:
      - "main"
      - "release/*"
  pull_request:
    branches:
      - "**"
    paths-ignore:
      - ".github/ISSUE_TEMPLATE/*"
      - ".gitignore"
      - README.md
  workflow_dispatch:

env:
  # チェックアウト
  DEVELOPER_DIR: /Applications/Xcode_16.4.app
  WORKSPACE_DIR: homete.xcodeproj
  BUILD_SCHEME: homete
  TEST_PLAN: homete
  SPM_CLONE_PATH: SourcePackages
  SPM_PACKAGE_RESOLVED_FILE_PATH: homete.xcodeproj/project.xcworkspace/xcshareddata/swiftpm/Package.resolved
  PROJECT_TOOLS_SPM_PACKAGE_RESOLVED_FILE_PATH: ProjectTools/Package.resolved
  TEST_OUTPUT_PATH: Build/test.xcresult

jobs:
  build:
    # 実行環境はmacosに設定
    runs-on: macos-15

    steps:
      # fetch-depth の計算
      - run: echo "fetch_depth=$(( commits + 1 ))" >> $GITHUB_ENV
        env:
          commits: ${{ github.event.pull_request.commits }}

      # チェックアウト(リポジトリからソースコードを取得)
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: ${{ env.fetch_depth }}

      # Xcodeの一覧出力
      - name: Show Xcode list
        run: ls /Applications | grep 'Xcode'

      # Xcodeのバージョン選択
      - name: Select Xcode version
        run: sudo xcode-select -s '${{ env.DEVELOPER_DIR }}/Contents/Developer'

      # Xcodeのバージョン出力
      - name: Show Xcode version
        run: xcodebuild -version

      # SPMのライブラリのキャッシュ
      - name: Cache Swift Packages For ProjectTools
        uses: actions/cache@v4.2.2
        with:
          path: ProjectTools/.build
          key: v1-project-tools-${{ runner.os }}-spm-${{ hashFiles(env.PROJECT_TOOLS_SPM_PACKAGE_RESOLVED_FILE_PATH) }}
          restore-keys: v1-project-tools-${{ runner.os }}-spm-

      # SPMのライブラリのキャッシュ
      - name: Cache Swift Packages For Project
        uses: actions/cache@v4.2.2
        with:
          path: SourcePackages
          key: v1-dev-${{ runner.os }}-spm-${{ hashFiles(env.SPM_PACKAGE_RESOLVED_FILE_PATH) }}
          restore-keys: v1-dev-${{ runner.os }}-spm-

      - name: Decode Firebase Api Key
        run: echo "${{ secrets.DEV_FIREBASE_API_KEY_BASE64 }}" | base64 --decode > homete/GoogleService-Info-dev.plist

      - name: Xcode Resolve Package Dependencies
        run: set -o pipefail &&
          xcodebuild
          -project "${WORKSPACE_DIR}"
          -scheme "${BUILD_SCHEME}"
          -configuration Debug
          -clonedSourcePackagesDirPath "${SPM_CLONE_PATH}"
          -skipPackagePluginValidation
          -skipMacroValidation
          -scmProvider xcode
          -resolvePackageDependencies

      # 単体テストの実行
      - name: Xcode test
        run: set -o pipefail &&
          xcodebuild
          -project "${WORKSPACE_DIR}"
          -configuration Debug
          -destination 'platform=iOS Simulator,OS=18.4,name=iPhone 16 Pro'
          -scheme "${BUILD_SCHEME}"
          -testPlan "${TEST_PLAN}"
          -skipPackagePluginValidation
          -skipMacroValidation
          -scmProvider xcode
          -clonedSourcePackagesDirPath "${SPM_CLONE_PATH}"
          -resultBundlePath "${TEST_OUTPUT_PATH}"
          clean test |
          xcbeautify --renderer github-actions

      # DangerJSをインストール
      - name: Install Danger JS
        if: github.event_name == 'pull_request'
        run: npm install -g danger

      # Dangerの実行
      - name: Static Analyze with Danger
        if: github.event_name == 'pull_request'
        run: |
          swift build
          swift run danger-swift ci --cwd ../
        working-directory: ProjectTools
        env:
          DANGER_GITHUB_API_TOKEN: ${{ secrets.DANGER_GITHUB_API_TOKEN }}

  # Deploy(TestFlight)
  call_deploy:
    if: github.ref_name == 'main'
    needs: build
    uses: ./.github/workflows/cd_testFlight.yml
    secrets: inherit

  # Deploy(Release)
  call_deploy_release:
    if: github.ref_name == 'release/*'
    needs: build
    uses: ./.github/workflows/cd_release.yml
    secrets: inherit
